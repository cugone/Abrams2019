#include "Engine/Core/Console.hpp"

#include "Engine/Core/ArgumentParser.hpp"
#include "Engine/Core/BuildConfig.hpp"
#include "Engine/Core/Clipboard.hpp"
#include "Engine/Core/ErrorWarningAssert.hpp"
#include "Engine/Core/FileUtils.hpp"
#include "Engine/Core/Image.hpp"
#include "Engine/Core/KerningFont.hpp"
#include "Engine/Core/StringUtils.hpp"
#include "Engine/Core/Win.hpp"

#include "Engine/Input/InputSystem.hpp"

#include "Engine/Math/MathUtils.hpp"
#include "Engine/Math/Matrix4.hpp"
#include "Engine/Math/IntVector2.hpp"
#include "Engine/Math/Vector3.hpp"

#include "Engine/Renderer/Camera2D.hpp"
#include "Engine/Renderer/Material.hpp"
#include "Engine/Renderer/Renderer.hpp"
#include "Engine/Renderer/Texture.hpp"
#include "Engine/Renderer/Window.hpp"

#include "Engine/RHI/RHIOutput.hpp"

#include <iterator>
#include <sstream>
#include <string>
#include <utility>

constexpr const uint16_t IDM_COPY = 0;
constexpr const uint16_t IDM_PASTE = 1;
constexpr const uint16_t IDM_CUT = 2;
constexpr const uint16_t IDM_SELECTALL = 3;
HACCEL hAcceleratorTable{};

void* Console::GetAcceleratorTable() const noexcept {
    return reinterpret_cast<void*>(hAcceleratorTable);
}

Console::Console(Renderer* renderer) noexcept
    : EngineSubsystem()
    , _renderer(renderer)
    , _show_cursor(false)
    , _is_open(false)
    , _highlight_mode(false)
    , _skip_nonwhitespace_mode(false)
    , _dirty_text(false)
    , _non_rendering_char(false)
    , _entryline_changed(false)
    , _output_changed(false)

{
    ACCEL copy{};
    copy.fVirt = FCONTROL | FVIRTKEY;
    copy.key = InputSystem::ConvertKeyCodeToWinVK(KeyCode::C);
    copy.cmd = IDM_COPY;

    ACCEL paste{};
    paste.fVirt = FCONTROL | FVIRTKEY;
    paste.key = InputSystem::ConvertKeyCodeToWinVK(KeyCode::V);
    paste.cmd = IDM_PASTE;

    ACCEL cut{};
    cut.fVirt = FCONTROL | FVIRTKEY;
    cut.key = InputSystem::ConvertKeyCodeToWinVK(KeyCode::X);
    cut.cmd = IDM_CUT;

    ACCEL select_all{};
    select_all.fVirt = FCONTROL | FVIRTKEY;
    select_all.key = InputSystem::ConvertKeyCodeToWinVK(KeyCode::A);
    select_all.cmd = IDM_SELECTALL;

    std::vector<ACCEL> accelerators = { copy, paste, cut, select_all };
    hAcceleratorTable = ::CreateAcceleratorTableA(accelerators.data(), static_cast<int>(accelerators.size()));
}

Console::~Console() noexcept {

    ::DestroyAcceleratorTable(hAcceleratorTable);

    delete _camera;
    _camera = nullptr;

    _commands.clear();
    _renderer = nullptr;
}

bool Console::ProcessSystemMessage(const EngineMessage& msg) noexcept {

    LPARAM lp = msg.lparam;
    WPARAM wp = msg.wparam;
    switch(msg.wmMessageCode) {
        case WindowsSystemMessage::Menu_SysCommand:
        case WindowsSystemMessage::Menu_Command:
        {
            bool is_lp_not_valid = lp ? true : false;
            bool is_closed = IsClosed();
            bool is_not_from_accelerator = HIWORD(wp) == 0;
            bool wont_handle = is_closed || is_lp_not_valid || is_not_from_accelerator;
            if(wont_handle) {
                return false;
            }
            auto id = LOWORD(wp);
            switch(id) {
                case IDM_COPY:
                    HandleClipboardCopy();
                    break;
                case IDM_PASTE:
                    HandleClipboardPaste();
                    break;
                case IDM_CUT:
                    HandleClipboardCut();
                    break;
                case IDM_SELECTALL:
                    HandleSelectAll();
                    break;
            }
            return true;
        }
        case WindowsSystemMessage::Keyboard_SysKeyDown:
        case WindowsSystemMessage::Keyboard_KeyDown:
        {
            _non_rendering_char = false;
            auto key = static_cast<unsigned char>(wp);
            auto lpBits = static_cast<uint32_t>(lp & 0xFFFFFFFFu);
            //0bTPXRRRRESSSSSSSSCCCCCCCCCCCCCCCC
            //C: repeat count
            //S: scan code
            //E: extended key flag
            //R: reserved
            //X: context code: 0 for KEYDOWN
            //P: previous state: 1 for already down
            //T: transition state: 0 for KEYDOWN
            constexpr uint32_t repeat_count_mask     = 0b0000'0000'0000'0000'1111'1111'1111'1111; //0x0000FFFF;
            constexpr uint32_t scan_code_mask        = 0b0000'0000'1111'1111'0000'0000'0000'0000; //0x00FF0000;
            constexpr uint32_t extended_key_mask     = 0b0000'0001'0000'0000'0000'0000'0000'0000; //0x01000000;
            constexpr uint32_t reserved_mask         = 0b0001'1110'0000'0000'0000'0000'0000'0000; //0x1E000000;
            constexpr uint32_t context_code_mask     = 0b0010'0000'0000'0000'0000'0000'0000'0000; //0x20000000;
            constexpr uint32_t previous_state_mask   = 0b0100'0000'0000'0000'0000'0000'0000'0000; //0x40000000;
            constexpr uint32_t transition_state_mask = 0b1000'0000'0000'0000'0000'0000'0000'0000; //0x80000000;
            bool is_extended_key = (lpBits & extended_key_mask) != 0;
            if(key < 32 || key == 127) { //Control and Del chars
                _non_rendering_char = true;
            }
            auto my_key = InputSystem::ConvertWinVKToKeyCode(key);
            if(is_extended_key) {
                if(IsClosed()) {
                    return false;
                }
                switch(my_key) {
                    case KeyCode::Alt: return true;
                    case KeyCode::Ctrl: SetSkipNonWhitespaceMode(true); return true;
                    //On Num Pad
                    case KeyCode::Return: return HandleReturnKey();
                    case KeyCode::LWin: return true;
                    case KeyCode::RWin: return true;
                    case KeyCode::Shift: SetHighlightMode(true); return true;
                    //Left Arrow in cluster on 108-key keyboards
                    case KeyCode::Left: return HandleLeftKey();
                    //Right Arrow in cluster on 108-key keyboards
                    case KeyCode::Right: return HandleRightKey();
                    //Up Arrow in cluster on 108-key keyboards
                    case KeyCode::Up: return HandleUpKey();
                    //Down Arrow in cluster on 108-key keyboards
                    case KeyCode::Down: return HandleDownKey();
                    //Delete key in cluster on 108-key keyboards
                    case KeyCode::Del: return HandleDelKey();
                    //Nav cluster on 108-key keyboards
                    case KeyCode::Home: return HandleHomeKey();
                    //Nav cluster in 108-key keyboards
                    case KeyCode::End: return HandleEndKey();
                    default: return false;
                }
            }
            if(my_key == KeyCode::Tilde) return HandleTildeKey();
            if(IsClosed()) return false;
            switch(my_key) {
                case KeyCode::Return: return HandleReturnKey();
                case KeyCode::Backspace: return HandleBackspaceKey();
                case KeyCode::Del: return HandleDelKey();
                case KeyCode::Escape: return HandleEscapeKey();
                //On Num Pad
                case KeyCode::Up: return HandleUpKey();
                //On Num Pad
                case KeyCode::Down: return HandleDownKey();
                //On Num Pad
                case KeyCode::Left: return HandleLeftKey();
                case KeyCode::Right: return HandleRightKey();
                //on Num Pad
                case KeyCode::Home: return HandleHomeKey();
                //on Num Pad
                case KeyCode::End: return HandleEndKey();
                case KeyCode::Ctrl: SetSkipNonWhitespaceMode(true); return true;
                case KeyCode::Shift: SetHighlightMode(true); return true;
                case KeyCode::Tab: return HandleTabKey();
                case KeyCode::F1: RunCommand(std::string("help ") + _entryline); return true;
                default:
                {
                    if(!_non_rendering_char) {
                        return true;
                    }
                    return false;
                }
            }
        }
        case WindowsSystemMessage::Keyboard_Char:
        {
            if(IsClosed() || _non_rendering_char) {
                return false;
            }
            _entryline_changed = false;
            auto char_code = static_cast<unsigned char>(wp);
            //uint32_t lpBits = lp;
            //0bTPXRRRRESSSSSSSSCCCCCCCCCCCCCCCC
            //C: repeat count
            //S: scan code
            //E: extended key flag
            //R: reserved
            //X: context code: 1 if Alt is already down, 0 otherwise
            //P: previous state: 1 for already down
            //T: transition state: 1 if being released, 0 if being pressed
            //constexpr uint32_t repeat_count_mask     = 0b0000'0000'0000'0000'1111'1111'1111'1111; //0x0000FFFF;
            //constexpr uint32_t scan_code_mask        = 0b0000'0000'1111'1111'0000'0000'0000'0000; //0x00FF0000;
            //constexpr uint32_t extended_key_mask     = 0b0000'0001'0000'0000'0000'0000'0000'0000; //0x01000000;
            //constexpr uint32_t reserved_mask         = 0b0001'1110'0000'0000'0000'0000'0000'0000; //0x1E000000;
            //constexpr uint32_t context_code_mask     = 0b0010'0000'0000'0000'0000'0000'0000'0000; //0x20000000;
            //constexpr uint32_t previous_state_mask   = 0b0100'0000'0000'0000'0000'0000'0000'0000; //0x40000000;
            //constexpr uint32_t transition_state_mask = 0b1000'0000'0000'0000'0000'0000'0000'0000; //0x80000000;
            //bool is_extended_key = (lpBits & extended_key_mask) != 0;
            //bool is_alt_down = (lpBits & context_code_mask) != 0;
            //auto my_key = InputSystem::ConvertWinVKToKeyCode(char_code);
            InsertCharInEntryLine(char_code);
            return true;
        }
        case WindowsSystemMessage::Keyboard_SysKeyUp:
        case WindowsSystemMessage::Keyboard_KeyUp:
        {
            if(IsClosed()) {
                return false;
            }
            _entryline_changed = false;
            auto char_code = static_cast<unsigned char>(wp);
            auto lpBits = static_cast<uint32_t>(lp & 0xFFFFFFFFu);
            //0bTPXRRRRESSSSSSSSCCCCCCCCCCCCCCCC
            //C: repeat count
            //S: scan code
            //E: extended key flag
            //R: reserved
            //X: context code: 0 for KEYUP
            //P: previous state: 1 for KEYUP
            //T: transition state: 1 for KEYUP
            constexpr uint32_t repeat_count_mask     = 0b0000'0000'0000'0000'1111'1111'1111'1111; //0x0000FFFF;
            constexpr uint32_t scan_code_mask        = 0b0000'0000'1111'1111'0000'0000'0000'0000; //0x00FF0000;
            constexpr uint32_t extended_key_mask     = 0b0000'0001'0000'0000'0000'0000'0000'0000; //0x01000000;
            constexpr uint32_t reserved_mask         = 0b0001'1110'0000'0000'0000'0000'0000'0000; //0x1E000000;
            constexpr uint32_t context_code_mask     = 0b0010'0000'0000'0000'0000'0000'0000'0000; //0x20000000;
            constexpr uint32_t previous_state_mask   = 0b0100'0000'0000'0000'0000'0000'0000'0000; //0x40000000;
            constexpr uint32_t transition_state_mask = 0b1000'0000'0000'0000'0000'0000'0000'0000; //0x80000000;
            bool is_extended_key = (lpBits & extended_key_mask) != 0;
            //bool is_alt_down = (lpBits & context_code_mask) != 0;
            auto my_key = InputSystem::ConvertWinVKToKeyCode(char_code);
            if(is_extended_key) {
                switch(my_key) {
                    case KeyCode::Ctrl: SetSkipNonWhitespaceMode(false); return true;
                    case KeyCode::Shift: SetHighlightMode(false); return true;
                    //Numpad Enter
                    case KeyCode::Return: SetOutputChanged(true); return true;
                    default: return false;
                }
            }
            switch(my_key) {
                case KeyCode::Shift: SetHighlightMode(false); return true;
                case KeyCode::Ctrl: SetSkipNonWhitespaceMode(false); return true;
                case KeyCode::Return: SetOutputChanged(true); return true;
                default: return false;
            }
        }
        default:
        {
            return false;
        }
    }

}

bool Console::HandleClipboardCopy() const noexcept {
    bool did_copy = false;
    if(Clipboard::HasText()) {
        auto hwnd = _renderer->GetOutput()->GetWindow()->GetWindowHandle();
        Clipboard c{ hwnd };
        if(_cursor_position != _selection_position) {
            std::string copied_text = CopyText(_cursor_position, _selection_position);
            did_copy = c.Copy(copied_text);
        } else {
            did_copy = c.Copy(_entryline);
        }
    }
    return did_copy;
}

void Console::HandleClipboardPaste() noexcept {
    if(Clipboard::HasText()) {
        auto hwnd = _renderer->GetOutput()->GetWindow()->GetWindowHandle();
        Clipboard c{hwnd};
        auto string_to_paste = c.Paste();
        PasteText(string_to_paste, _cursor_position);
    }
}

void Console::HandleClipboardCut() noexcept {
    if(HandleClipboardCopy()) {
        RemoveText(_cursor_position, _selection_position);
    }
}

void Console::HandleSelectAll() noexcept {
    _cursor_position = _entryline.end();
    _selection_position = _entryline.begin();
}

bool Console::HandleEscapeKey() noexcept {
    _entryline.empty() ? Close() : ClearEntryLine();
    return true;
}

bool Console::HandleTabKey() noexcept {
    AutoCompleteEntryline();
    return true;
}

void Console::AutoCompleteEntryline() noexcept {
    for(const auto& entry : _commands) {
        if(StringUtils::StartsWith(entry.first, _entryline)) {
            _entryline = entry.first;
            MoveCursorToEnd();
        }
    }
}

bool Console::HandleBackspaceKey() noexcept {
    if(_cursor_position != _selection_position) {
        RemoveText(_cursor_position, _selection_position);
    } else {
        RemoveTextBehindCaret();
    }
    return true;
}

bool Console::HandleUpKey() noexcept {
    HistoryUp();
    return true;
}

bool Console::HandleDownKey() noexcept {
    HistoryDown();
    return true;
}

bool Console::HandleReturnKey() noexcept {
    PostEntryLine();
    return true;
}

bool Console::HandleTildeKey() noexcept {
    ToggleConsole();
    if(IsOpen()) {
        _non_rendering_char = true;
        _entryline.clear();
    }
    return true;
}

void Console::SetHighlightMode(bool value) noexcept {
    _highlight_mode = value;
}

void Console::SetOutputChanged(bool value) noexcept {
    _output_changed = value;
}

void Console::SetSkipNonWhitespaceMode(bool value) noexcept {
    _skip_nonwhitespace_mode = value;
}

bool Console::HandleEndKey() noexcept {
    auto offset = std::distance(_cursor_position, std::cend(_entryline));
    MoveCursorRight(offset);
    return true;
}

bool Console::HandleHomeKey() noexcept {
    auto offset = std::distance(std::cbegin(_entryline), _cursor_position);
    MoveCursorLeft(offset);
    return true;
}

bool Console::HandleDelKey() noexcept {
    if(_cursor_position != _selection_position) {
        RemoveText(_cursor_position, _selection_position);
    } else {
        RemoveTextInFrontOfCaret();
    }
    return true;
}

bool Console::HandleRightKey() noexcept {
    auto offset = std::distance(std::cbegin(_entryline), _cursor_position);
    auto offset_from_next_space = _entryline.find_first_of(' ', offset);
    MoveCursorRight(_skip_nonwhitespace_mode ? offset + offset_from_next_space : 1);
    return true;
}

bool Console::HandleLeftKey() noexcept {
    auto offset = std::distance(std::cbegin(_entryline), _cursor_position);
    auto offset_from_previous_space = _entryline.find_last_of(' ', offset - 1);
    MoveCursorLeft(_skip_nonwhitespace_mode ? offset - offset_from_previous_space : 1);
    return true;
}

void Console::RunCommand(std::string name_and_args) noexcept {
    if(name_and_args.empty()) {
        return;
    }
    name_and_args = StringUtils::TrimWhitespace(name_and_args);
    auto first_space = name_and_args.find_first_of(' ');
    std::string command = name_and_args.substr(0, first_space);
    std::string args = first_space == std::string::npos ? "" : name_and_args.substr(first_space);
    auto iter = _commands.find(command);
    if(iter == _commands.end()) {
        ErrorMsg("INVALID COMMAND");
        return;
    }
    iter->second.command_function(args);
}

void Console::RegisterCommand(const Command& command) noexcept {
    if(command.command_name.empty()) {
        return;
    }
    auto iter = _commands.find(command.command_name);
    if(iter == _commands.end()) {
        _commands.insert_or_assign(command.command_name, command);
    }
}

void Console::UnregisterCommand(const std::string& command_name) noexcept {
    auto iter = _commands.find(command_name);
    if(iter != _commands.end()) {
        _commands.erase(command_name);
    }
}


void Console::PushCommandList(const CommandList& list) noexcept {
    for(const auto& command : list.GetCommands()) {
        RegisterCommand(command);
    }
}


void Console::PopCommandList(const CommandList& list) noexcept {
    for(const auto& command : list.GetCommands()) {
        UnregisterCommand(command.command_name);
    }
}

void Console::UnregisterAllCommands() noexcept {
    _commands.clear();
}

void Console::ToggleConsole() noexcept {
    _is_open = !_is_open;
}

bool Console::IsOpen() const noexcept {
    return _is_open;
}

bool Console::IsClosed() const noexcept {
    return !_is_open;
}

void Console::Open() noexcept {
    _is_open = true;
}

void Console::Close() noexcept {
    _is_open = false;
}

void Console::ToggleHighlightMode() noexcept {
    _highlight_mode = !_highlight_mode;
}

bool Console::IsHighlighting() const noexcept {
    return _highlight_mode;
}

void Console::PostEntryLine() noexcept {
    if(_entryline.empty()) {
        return;
    }
    PushEntrylineToOutputBuffer();
    PushEntrylineToBuffer();
    RunCommand(_entryline);
    ClearEntryLine();
}

void Console::PushEntrylineToOutputBuffer() noexcept {
    PrintMsg(_entryline);
}

void Console::PushEntrylineToBuffer() noexcept {
    auto already_in_buffer = !_entryline_buffer.empty() && _entryline_buffer.back() == _entryline;
    if(already_in_buffer) {
        return;
    }
    _entryline_buffer.push_back(_entryline);
    _current_history_position = _entryline_buffer.end();
}

void Console::ClearEntryLine() noexcept {
    _entryline.clear();
    _cursor_position = std::begin(_entryline);
    _selection_position = std::begin(_entryline);
}

void Console::MoveCursorLeft(std::string::difference_type distance /*= 1*/) noexcept {
    if(_cursor_position != _entryline.begin()) {
        if(!_highlight_mode) {
            if(std::distance(std::cbegin(_entryline), _cursor_position) > distance) {
                _cursor_position -= distance;
            } else {
                _cursor_position = std::begin(_entryline);
            }
            _selection_position = _cursor_position;
        } else {
            UpdateSelectedRange(-distance);
        }
    }
}

void Console::MoveCursorRight(std::string::difference_type distance /*= 1*/) noexcept {
    if(_cursor_position != _entryline.end()) {
        if(!_highlight_mode) {
            if(distance < std::distance(_cursor_position, std::cend(_entryline))) {
                _cursor_position += distance;
            } else {
                _cursor_position = std::end(_entryline);
            }
            _selection_position = _cursor_position;
        } else {
            UpdateSelectedRange(distance);
        }
    }
}

void Console::MoveCursorToEnd() noexcept {
    MoveCursorRight(_entryline.size() + 1);
}

void Console::MoveCursorToFront() noexcept {
    MoveCursorLeft(_entryline.size() + 1);
}

void Console::UpdateSelectedRange(std::string::difference_type distance) noexcept {
    if(distance > 0) {
        auto distance_from_end = std::distance(_cursor_position, std::cend(_entryline));
        if(distance_from_end > std::abs(distance)) {
            _cursor_position += distance;
        } else {
            _cursor_position = std::end(_entryline);
        }

        auto rangeStart = _cursor_position;
        auto rangeEnd = _selection_position;
        if(!_highlight_mode && _selection_position < _cursor_position) {
            rangeStart = _selection_position;
            rangeEnd = _cursor_position;
        }
        _cursor_position = rangeStart;
        _selection_position = rangeEnd;
    } else if(distance < 0) {
        auto distance_from_beginning = std::distance(std::cbegin(_entryline), _cursor_position);
        if(distance_from_beginning > std::abs(distance)) {
            _cursor_position += distance;
        } else {
            _cursor_position = std::begin(_entryline);
        }

        auto rangeStart = _cursor_position;
        auto rangeEnd = _selection_position;
        if(!_highlight_mode && _selection_position < _cursor_position) {
            rangeStart = _selection_position;
            rangeEnd = _cursor_position;
        }
        _cursor_position = rangeStart;
        _selection_position = rangeEnd;
    }
}

void Console::RemoveTextInFrontOfCaret() noexcept {
    if(!_entryline.empty()) {
        if(_cursor_position != _entryline.end()) {
            _cursor_position = _entryline.erase(_cursor_position);
            _selection_position = _cursor_position;
            _entryline_changed = true;
        }
    }
}

void Console::PopConsoleBuffer() noexcept {
    if(!_entryline.empty()) {
        if(_cursor_position == _entryline.end()) {
            _entryline.pop_back();
            --_cursor_position;
            _entryline_changed = true;
        }
    }
}
void Console::RemoveTextBehindCaret() noexcept {
    if(!_entryline.empty()) {
        if(_cursor_position != _entryline.end()) {
            if(_cursor_position != _entryline.begin()) {
                _cursor_position = _entryline.erase(_cursor_position - 1);
                _entryline_changed = true;
            }
        } else {
            PopConsoleBuffer();
        }
        _selection_position = _cursor_position;
    }
}

void Console::RemoveText(std::string::const_iterator start, std::string::const_iterator end) noexcept {
    if(end < start) {
        std::swap(start, end);
    }
    _cursor_position = _entryline.erase(start, end);
    _selection_position = _cursor_position;
    _entryline_changed = true;
}

std::string Console::CopyText(std::string::const_iterator start, std::string::const_iterator end) const noexcept {
    if(end < start) {
        std::swap(start, end);
    }
    return std::string(start, end);
}

void Console::PasteText(const std::string& text, std::string::const_iterator loc) noexcept {
    if(text.empty()) {
        return;
    }
    if(_cursor_position != _selection_position) {
        RemoveText(_cursor_position, _selection_position);
    }
    _cursor_position = _entryline.insert(loc, std::begin(text), std::end(text)) + text.size();
    _selection_position = _cursor_position;
    _entryline_changed = true;
}

void Console::Initialize() {
    _camera = new Camera2D;
    RegisterDefaultCommands();
    RegisterDefaultFont();
}

void Console::RegisterDefaultCommands() noexcept {
    Console::Command help{};
    help.command_name = "help";
    help.help_text_short = "Displays every command with brief description.";
    help.help_text_long = "help [command|string]: Displays command's long description or all commands starting with \'string\'.";
    help.command_function = [this](const std::string& args)->void {
        RunCommand("clear");
        ArgumentParser arg_set(args);
        std::string line{};
        if(arg_set >> line) {
            line = StringUtils::TrimWhitespace(line);
            auto found_iter = _commands.find(line);
            if(found_iter != _commands.end()) {
                PrintMsg(std::string{ found_iter->second.command_name + ": " + found_iter->second.help_text_short });
                return;
            }
            for(auto& entry : _commands) {
                if(StringUtils::StartsWith(entry.first, line)) {             
                    PrintMsg(std::string{ entry.second.command_name + ": " + entry.second.help_text_short });
                }
            }
        } else {
            for(auto& entry : _commands) {
                PrintMsg(std::string{ entry.second.command_name + ": " + entry.second.help_text_short });
            }
        }
    };
    RegisterCommand(help);

    Console::Command echo{};
    echo.command_name = "echo";
    echo.help_text_short = "Displays text as arguments.";
    echo.help_text_long = "echo [text]: Displays text as if they were arguments, each on a separate line.";
    echo.command_function = [this](const std::string& args)->void {
        ArgumentParser arg_set(args);
        std::string cur_arg{};
        while(arg_set >> cur_arg) {
            PrintMsg(cur_arg);
            cur_arg.clear();
        }
    };
    RegisterCommand(echo);

    Console::Command clear{};
    clear.command_name = "clear";
    clear.help_text_short = "Clears the output buffer.";
    clear.help_text_long = clear.help_text_short;
    clear.command_function = [this](const std::string& /*args*/)->void {
        _output_changed = true;
        _output_buffer.clear();
    };
    RegisterCommand(clear);
}

void Console::BeginFrame() {
    if(_cursor_timer.CheckAndReset()) {
        _show_cursor = !_show_cursor;
    }
}

void Console::Update([[maybe_unused]]TimeUtils::FPSeconds deltaSeconds) {
    /* DO NOTHING */
}

void Console::Render() const {

    if(IsClosed()) {
        return;
    }

    _renderer->SetModelMatrix(Matrix4::GetIdentity());
    _renderer->SetViewMatrix(Matrix4::GetIdentity());
    _renderer->SetProjectionMatrix(Matrix4::GetIdentity());

    auto view_half_extents = SetupViewFromCamera();
    DrawBackground(view_half_extents);
    DrawOutput(view_half_extents);
    DrawEntryLine(view_half_extents);
    DrawCursor(view_half_extents);

}

void Console::DrawCursor(const Vector2& view_half_extents) const noexcept {
    if(!_show_cursor) {
        return;
    }
    float textline_bottom = view_half_extents.y * 0.99f;
    float textline_left = -view_half_extents.x * 0.99f;
    auto font = _renderer->GetFont("System32");
    auto first = _entryline.begin();
    auto has_text = !_entryline.empty();
    std::string text_left_of_cursor = has_text ? std::string(first, _cursor_position) : std::string("");
    float xPosOffsetToCaret = font->CalculateTextWidth(text_left_of_cursor);
    Matrix4 cursor_t = Matrix4::CreateTranslationMatrix(Vector3(textline_left + xPosOffsetToCaret, textline_bottom, 0.0f));
    Matrix4 model_cursor_mat = cursor_t;
    _renderer->SetModelMatrix(model_cursor_mat);
    _renderer->SetMaterial(font->GetMaterial());
    _renderer->DrawTextLine(font, "|", Rgba::White);
}

void Console::DrawOutput(const Vector2& view_half_extents) const noexcept {
    if(_output_buffer.empty()) {
        return;
    }
    std::vector<Vertex3D> vbo{};
    std::vector<unsigned int> ibo{};
    auto font = _renderer->GetFont("System32");
    std::ostringstream ss;
    {
        auto draw_x = -view_half_extents.x;
        auto draw_y = view_half_extents.y;
        auto draw_loc = Vector2(draw_x * 0.99f, draw_y);
        for(auto iter = _output_buffer.rbegin(); iter != _output_buffer.rend(); ++iter) {
            draw_loc.y -= font->CalculateTextHeight(iter->str);
            if(draw_loc.y < -view_half_extents.y) {
                break;
            }
            ss << '\n' << iter->str;
            _renderer->AppendMultiLineTextBuffer(font, iter->str, draw_loc, iter->color, vbo, ibo);
        }
    }
    
    _renderer->SetMaterial(font->GetMaterial());
    _renderer->SetModelMatrix(Matrix4::GetIdentity());
    _renderer->DrawIndexed(PrimitiveType::Triangles, vbo, ibo);
}

void Console::OutputMsg(const std::string& msg, const Rgba& color) noexcept {
    _output_changed = true;
    _output_buffer.push_back({msg, color});
}

void Console::RegisterDefaultFont() noexcept {

#pragma region system32_font_data
    //TURN OFF WORD WRAP AND DO NOT SCROLL TO THE RIGHT!
    const std::vector<unsigned char> raw_system32_font = { 0x42, 0x4d, 0x46, 0x03, 0x01, 0x15, 0x00, 0x00, 0x00, 0x20, 0x00, 0xc0, 0x00, 0x64, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x1a, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x33, 0x32, 0x5f, 0x30, 0x2e, 0x70, 0x6e, 0x67, 0x00, 0x04, 0x78, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x52, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x20, 0x00, 0x00, 0x00, 0x98, 0x00, 0xb2, 0x00, 0x18, 0x00, 0x01, 0x00, 0xf8, 0xff, 0x1f, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x21, 0x00, 0x00, 0x00, 0x08, 0x00, 0x9c, 0x00, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x22, 0x00, 0x00, 0x00, 0xb4, 0x00, 0xa8, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x0f, 0x23, 0x00, 0x00, 0x00, 0x30, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x24, 0x00, 0x00, 0x00, 0x32, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x25, 0x00, 0x00, 0x00, 0xea, 0x00, 0x34, 0x00, 0x16, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00, 0x00, 0x0f, 0x26, 0x00, 0x00, 0x00, 0x48, 0x00, 0x72, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x27, 0x00, 0x00, 0x00, 0xd2, 0x00, 0xa8, 0x00, 0x04, 0x00, 0x08, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x28, 0x00, 0x00, 0x00, 0xce, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x29, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x2a, 0x00, 0x00, 0x00, 0x92, 0x00, 0xa8, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x0f, 0x2b, 0x00, 0x00, 0x00, 0x18, 0x00, 0xae, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x2c, 0x00, 0x00, 0x00, 0x44, 0x00, 0xba, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x2d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x34, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x2e, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xa6, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x16, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x2f, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x30, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x31, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x84, 0x00, 0x08, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x33, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x34, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x88, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x35, 0x00, 0x00, 0x00, 0x18, 0x00, 0x88, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x36, 0x00, 0x00, 0x00, 0x24, 0x00, 0x88, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x37, 0x00, 0x00, 0x00, 0x48, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x38, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x39, 0x00, 0x00, 0x00, 0x54, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x3a, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x3b, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x9a, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x3c, 0x00, 0x00, 0x00, 0x28, 0x00, 0x9c, 0x00, 0x0c, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x3d, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xa8, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x3e, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x9c, 0x00, 0x0c, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x3f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x0f, 0x41, 0x00, 0x00, 0x00, 0x10, 0x00, 0x60, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x43, 0x00, 0x00, 0x00, 0x10, 0x00, 0x74, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x44, 0x00, 0x00, 0x00, 0x70, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x45, 0x00, 0x00, 0x00, 0x56, 0x00, 0x72, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x46, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x48, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x47, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x5c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x48, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x5c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x49, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x9c, 0x00, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x4a, 0x00, 0x00, 0x00, 0x84, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x4b, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x5c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x4c, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x74, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x4d, 0x00, 0x00, 0x00, 0x82, 0x00, 0x4a, 0x00, 0x14, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x18, 0x00, 0x00, 0x0f, 0x4e, 0x00, 0x00, 0x00, 0x80, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x4f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x50, 0x00, 0x00, 0x00, 0x40, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x51, 0x00, 0x00, 0x00, 0x90, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x52, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x4a, 0x00, 0x12, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x53, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x74, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x54, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x55, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x56, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x57, 0x00, 0x00, 0x00, 0xce, 0x00, 0x34, 0x00, 0x1c, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x1c, 0x00, 0x00, 0x0f, 0x58, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x48, 0x00, 0x12, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x59, 0x00, 0x00, 0x00, 0x96, 0x00, 0x4a, 0x00, 0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x5a, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x4a, 0x00, 0x12, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0x5b, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x5c, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x5d, 0x00, 0x00, 0x00, 0xda, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x5e, 0x00, 0x00, 0x00, 0xe2, 0x00, 0xa6, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x5f, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x60, 0x00, 0x00, 0x00, 0xec, 0x00, 0xa6, 0x00, 0x08, 0x00, 0x06, 0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x61, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xb0, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x62, 0x00, 0x00, 0x00, 0x90, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x64, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x65, 0x00, 0x00, 0x00, 0x24, 0x00, 0xae, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x66, 0x00, 0x00, 0x00, 0xea, 0x00, 0x84, 0x00, 0x08, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x67, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x68, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x69, 0x00, 0x00, 0x00, 0x04, 0x00, 0x9c, 0x00, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x6a, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x6b, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x6d, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x9a, 0x00, 0x14, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x0f, 0x6e, 0x00, 0x00, 0x00, 0xee, 0x00, 0x98, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x6f, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x98, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x70, 0x00, 0x00, 0x00, 0x64, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x71, 0x00, 0x00, 0x00, 0x70, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x00, 0x00, 0x50, 0x00, 0xac, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x73, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x9a, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x74, 0x00, 0x00, 0x00, 0x34, 0x00, 0x9c, 0x00, 0x08, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x75, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x9a, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x76, 0x00, 0x00, 0x00, 0xae, 0x00, 0x9a, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x77, 0x00, 0x00, 0x00, 0x62, 0x00, 0x9a, 0x00, 0x14, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x00, 0x0f, 0x78, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x9a, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x7a, 0x00, 0x00, 0x00, 0xca, 0x00, 0x9a, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0x7b, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x7c, 0x00, 0x00, 0x00, 0xec, 0x00, 0x1a, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x7d, 0x00, 0x00, 0x00, 0xba, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x7e, 0x00, 0x00, 0x00, 0x54, 0x00, 0xba, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0x7f, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x81, 0x00, 0x00, 0x00, 0x56, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x8d, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x8f, 0x00, 0x00, 0x00, 0x42, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x90, 0x00, 0x00, 0x00, 0x46, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0x9d, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x9a, 0x00, 0x04, 0x00, 0x12, 0x00, 0x02, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x62, 0x00, 0xb6, 0x00, 0x36, 0x00, 0x01, 0x00, 0xee, 0xff, 0x1f, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xa1, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x84, 0x00, 0x04, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xa2, 0x00, 0x00, 0x00, 0x10, 0x00, 0x9c, 0x00, 0x0c, 0x00, 0x12, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xa3, 0x00, 0x00, 0x00, 0x88, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xa4, 0x00, 0x00, 0x00, 0x5e, 0x00, 0xaa, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xa5, 0x00, 0x00, 0x00, 0x50, 0x00, 0x5e, 0x00, 0x10, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xa6, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xa7, 0x00, 0x00, 0x00, 0x94, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xa8, 0x00, 0x00, 0x00, 0x4a, 0x00, 0xba, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xa9, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x4a, 0x00, 0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xaa, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x98, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xab, 0x00, 0x00, 0x00, 0x6a, 0x00, 0xa8, 0x00, 0x0e, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xac, 0x00, 0x00, 0x00, 0xd6, 0x00, 0xa8, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xad, 0x00, 0x00, 0x00, 0x30, 0x00, 0x72, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xae, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x4a, 0x00, 0x14, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xaf, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x4a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xb0, 0x00, 0x00, 0x00, 0xcc, 0x00, 0xa8, 0x00, 0x06, 0x00, 0x08, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xb1, 0x00, 0x00, 0x00, 0x30, 0x00, 0xae, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xb2, 0x00, 0x00, 0x00, 0x9e, 0x00, 0xa8, 0x00, 0x08, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xb3, 0x00, 0x00, 0x00, 0xa6, 0x00, 0xa8, 0x00, 0x08, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xb4, 0x00, 0x00, 0x00, 0xf4, 0x00, 0xa6, 0x00, 0x08, 0x00, 0x06, 0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xb5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x0e, 0x00, 0x16, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xb6, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x84, 0x00, 0x0a, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xb7, 0x00, 0x00, 0x00, 0x5e, 0x00, 0xb6, 0x00, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xb8, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xba, 0x00, 0x08, 0x00, 0x06, 0x00, 0x02, 0x00, 0x1a, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xb9, 0x00, 0x00, 0x00, 0xae, 0x00, 0xa8, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xba, 0x00, 0x00, 0x00, 0x58, 0x00, 0xac, 0x00, 0x06, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x00, 0x0f, 0xbb, 0x00, 0x00, 0x00, 0x78, 0x00, 0xa8, 0x00, 0x0e, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xbc, 0x00, 0x00, 0x00, 0x18, 0x00, 0x4c, 0x00, 0x16, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00, 0x00, 0x0f, 0xbd, 0x00, 0x00, 0x00, 0x44, 0x00, 0x4a, 0x00, 0x16, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00, 0x00, 0x0f, 0xbe, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x4a, 0x00, 0x16, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x16, 0x00, 0x00, 0x0f, 0xbf, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc1, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc2, 0x00, 0x00, 0x00, 0x40, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc3, 0x00, 0x00, 0x00, 0x30, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc5, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x18, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x00, 0x0f, 0xc7, 0x00, 0x00, 0x00, 0x50, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xc8, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xc9, 0x00, 0x00, 0x00, 0x88, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xca, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xcb, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x1a, 0x00, 0x0e, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xcc, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xcd, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x1a, 0x00, 0x06, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xce, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xcf, 0x00, 0x00, 0x00, 0xb2, 0x00, 0x1a, 0x00, 0x08, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xd0, 0x00, 0x00, 0x00, 0xce, 0x00, 0x48, 0x00, 0x12, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd1, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd2, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd3, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd4, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd5, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd6, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd7, 0x00, 0x00, 0x00, 0x86, 0x00, 0xa8, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xd8, 0x00, 0x00, 0x00, 0x20, 0x00, 0x60, 0x00, 0x10, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xd9, 0x00, 0x00, 0x00, 0x20, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xda, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xdb, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xdc, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xdd, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x14, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x0f, 0xde, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x72, 0x00, 0x0e, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x12, 0x00, 0x00, 0x0f, 0xdf, 0x00, 0x00, 0x00, 0xac, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe1, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe2, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x36, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe3, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe4, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x72, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe5, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe6, 0x00, 0x00, 0x00, 0x76, 0x00, 0x9a, 0x00, 0x14, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xe7, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x70, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0xe8, 0x00, 0x00, 0x00, 0x62, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xe9, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xea, 0x00, 0x00, 0x00, 0x56, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xec, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x34, 0x00, 0x08, 0x00, 0x16, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xed, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x34, 0x00, 0x08, 0x00, 0x16, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xee, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x34, 0x00, 0x08, 0x00, 0x16, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xef, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x84, 0x00, 0x08, 0x00, 0x14, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x88, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf1, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf2, 0x00, 0x00, 0x00, 0x86, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf3, 0x00, 0x00, 0x00, 0x92, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf4, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf5, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf6, 0x00, 0x00, 0x00, 0x78, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf7, 0x00, 0x00, 0x00, 0x48, 0x00, 0xac, 0x00, 0x08, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xac, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xf9, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xfa, 0x00, 0x00, 0x00, 0x26, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xfb, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x34, 0x00, 0x0c, 0x00, 0x16, 0x00, 0x02, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x86, 0x00, 0x0c, 0x00, 0x14, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x96, 0x00, 0x1a, 0x00, 0x0c, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x10, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x0f };
#pragma endregion Do not hover. There be dragons here!

#pragma region system32_font_image
    //TURN OFF WORD WRAP AND DO NOT SCROLL TO THE RIGHT!
    const std::vector<unsigned char> raw_system32_image = { 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x08, 0x06, 0x00, 0x00, 0x00, 0xeb, 0xed, 0xbd, 0x66, 0x00, 0x00, 0x0e, 0x03, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xed, 0x9d, 0xd9, 0x72, 0xe3, 0xba, 0x0e, 0x45, 0x9d, 0x5b, 0xf9, 0xff, 0x5f, 0xce, 0x7d, 0xc8, 0x71, 0x55, 0xcc, 0x16, 0x4d, 0x0c, 0x1b, 0x24, 0x65, 0xae, 0xf5, 0xd2, 0xd5, 0x12, 0x27, 0x0d, 0x11, 0x36, 0x01, 0x90, 0xfe, 0xfa, 0xf9, 0xf9, 0x79, 0x74, 0xe8, 0x9d, 0xf8, 0xea, 0x55, 0x70, 0xb6, 0x13, 0x6d, 0xcf, 0xda, 0xbe, 0x6a, 0x9c, 0xa3, 0x76, 0xaa, 0xfa, 0xf7, 0xf6, 0xdb, 0x96, 0x9f, 0x7d, 0xbe, 0xe5, 0x59, 0xfe, 0xa7, 0xf9, 0x7f, 0x0f, 0xef, 0xf5, 0x8f, 0xea, 0x8f, 0xda, 0xc9, 0x8e, 0x3f, 0x7b, 0xff, 0x46, 0xe3, 0xa8, 0x7a, 0x7f, 0x5e, 0xca, 0xfd, 0xcf, 0xd9, 0x09, 0x00, 0x7c, 0x10, 0xdf, 0x8e, 0xb2, 0xd6, 0x2f, 0x92, 0xf5, 0x8b, 0xf6, 0xd3, 0xfc, 0xeb, 0xed, 0xa7, 0x47, 0xb6, 0xbe, 0xb7, 0x9d, 0xd6, 0x52, 0x78, 0xe9, 0xd5, 0xb3, 0x5a, 0xce, 0xd5, 0xf4, 0xae, 0xdf, 0x7a, 0x3f, 0xaa, 0xae, 0x3f, 0xfb, 0xfc, 0xa2, 0xcf, 0xd3, 0xcb, 0xd2, 0xf7, 0x07, 0x05, 0x00, 0x70, 0x30, 0x5f, 0x17, 0x3e, 0x80, 0xa8, 0x45, 0x56, 0xcf, 0xe1, 0xaa, 0xe7, 0x8c, 0xea, 0x76, 0xb2, 0xed, 0xa9, 0xc7, 0xb1, 0x3b, 0x55, 0x73, 0xe8, 0xbb, 0xdf, 0x37, 0xd5, 0x75, 0xf7, 0xce, 0xe3, 0x03, 0x00, 0x80, 0x5f, 0xae, 0x14, 0x40, 0x94, 0xa8, 0xd7, 0xb8, 0x37, 0x07, 0x1a, 0x1d, 0x57, 0x8d, 0xcb, 0x5b, 0x2e, 0xdb, 0x8f, 0x1a, 0x6f, 0x94, 0xa5, 0x3a, 0xda, 0x30, 0xea, 0x7f, 0xd4, 0x7e, 0x75, 0xfd, 0xec, 0xf5, 0x8f, 0xda, 0x1f, 0xd5, 0x57, 0xdf, 0x3f, 0x2f, 0x28, 0x00, 0x00, 0xf8, 0xe5, 0xfb, 0x51, 0xff, 0x45, 0x1c, 0x59, 0xf6, 0xd6, 0x5b, 0xd9, 0x8b, 0x0e, 0x7c, 0x3a, 0x55, 0x96, 0xb9, 0x2a, 0x9a, 0x90, 0xed, 0x7f, 0x75, 0xfd, 0xb6, 0xdc, 0x6c, 0xdf, 0x41, 0x74, 0xfc, 0xd2, 0xbf, 0x57, 0x14, 0x00, 0xc0, 0xc1, 0x78, 0xf2, 0x00, 0x56, 0x31, 0x52, 0x0c, 0x3d, 0xb2, 0x99, 0x58, 0xd1, 0x7e, 0xbc, 0xf5, 0xbd, 0x58, 0xaf, 0xab, 0x4a, 0x51, 0xa9, 0xfb, 0x5f, 0x5d, 0xff, 0xd1, 0x9c, 0x1f, 0x3d, 0x2f, 0xeb, 0xfb, 0x98, 0xf5, 0x69, 0x4d, 0x51, 0xc4, 0x28, 0x00, 0x80, 0x83, 0xf9, 0x7e, 0xe8, 0xbf, 0x68, 0xa3, 0xf2, 0x51, 0xb2, 0xe3, 0xdc, 0x95, 0xbb, 0x67, 0x02, 0xc2, 0xbd, 0x78, 0x79, 0x9f, 0x50, 0x00, 0x00, 0x07, 0xb3, 0xc2, 0x07, 0x90, 0xb5, 0xd0, 0xd9, 0xb9, 0xe1, 0xa8, 0xdd, 0x27, 0xde, 0x39, 0xd7, 0xea, 0xfa, 0x10, 0x23, 0xea, 0x63, 0xaa, 0x7a, 0x0f, 0xab, 0x21, 0x0f, 0x00, 0x00, 0x7e, 0xf9, 0xab, 0x00, 0xee, 0xf6, 0x45, 0xcb, 0x66, 0x0a, 0x7a, 0x57, 0xab, 0x45, 0x2d, 0x74, 0x55, 0x7d, 0x80, 0x34, 0x28, 0x00, 0x80, 0x83, 0x51, 0xf8, 0x00, 0xbc, 0x99, 0x7d, 0x77, 0x53, 0x1a, 0x70, 0x06, 0xd1, 0xb8, 0xbb, 0x6a, 0xcd, 0xca, 0x12, 0x50, 0x00, 0x00, 0x07, 0x73, 0xa5, 0x00, 0xd4, 0x5f, 0xb4, 0x51, 0xa6, 0xd3, 0x2e, 0x64, 0xbd, 0xee, 0xab, 0xeb, 0x03, 0xb8, 0x41, 0x01, 0x00, 0x1c, 0xcc, 0xbb, 0xfd, 0x00, 0xd4, 0xde, 0xf5, 0xaa, 0x5d, 0x51, 0xab, 0x77, 0x12, 0xda, 0x6d, 0xbd, 0xbb, 0x55, 0xa1, 0x71, 0xfe, 0xfa, 0x7c, 0x76, 0x8d, 0x88, 0x2a, 0xf3, 0x74, 0x8b, 0xeb, 0x47, 0x01, 0x00, 0x1c, 0x8c, 0x72, 0x4f, 0xc0, 0x1e, 0x5e, 0x6f, 0x6a, 0xb6, 0xfd, 0x53, 0x14, 0x40, 0x55, 0xfb, 0x9f, 0x5e, 0x5f, 0xf5, 0xbe, 0xa8, 0xfe, 0x4e, 0x96, 0x5e, 0x3f, 0x0a, 0x00, 0xe0, 0x60, 0xfe, 0x2a, 0x80, 0xec, 0x17, 0x2d, 0x3b, 0x67, 0xe9, 0x95, 0xb3, 0x8e, 0xc7, 0xfa, 0x25, 0x54, 0xef, 0x27, 0x10, 0x1d, 0x87, 0xaa, 0xdf, 0xac, 0xcf, 0xa5, 0xea, 0x39, 0x55, 0xbd, 0x4f, 0xa3, 0xe3, 0x56, 0x85, 0xe4, 0xbd, 0xae, 0x5e, 0x7d, 0xef, 0x7b, 0x57, 0xd5, 0x4e, 0x5b, 0xae, 0x07, 0x0a, 0x00, 0x00, 0x7e, 0xb9, 0x5a, 0x0b, 0xf0, 0x64, 0x55, 0x86, 0x9e, 0xf5, 0x4b, 0xe7, 0xad, 0xef, 0xcd, 0xbd, 0xef, 0x1d, 0xcf, 0x5a, 0x56, 0xaf, 0xa5, 0x1a, 0xf5, 0x9b, 0xbd, 0x5f, 0x2a, 0x54, 0xef, 0x45, 0xd4, 0xc2, 0x5b, 0xf3, 0x4d, 0x46, 0x99, 0xa9, 0xbd, 0x7e, 0xad, 0xc7, 0xbd, 0xfd, 0xf4, 0x60, 0x47, 0x20, 0x00, 0xa8, 0x45, 0xf9, 0xdb, 0x80, 0xd9, 0xf3, 0xbd, 0xf2, 0xd6, 0x75, 0xda, 0xed, 0xf1, 0x2a, 0x1f, 0x86, 0xd5, 0x72, 0xb4, 0x58, 0x95, 0x89, 0x57, 0x39, 0xf4, 0xda, 0xef, 0x95, 0xcf, 0x3e, 0xa7, 0x55, 0x39, 0xef, 0xd5, 0x19, 0xa5, 0xab, 0x33, 0x53, 0xbd, 0x0a, 0x46, 0x02, 0x0a, 0x00, 0xe0, 0x60, 0xae, 0x14, 0x40, 0x55, 0x7c, 0x33, 0x3a, 0x77, 0x56, 0x79, 0xa9, 0xbd, 0x96, 0xaf, 0xca, 0xd2, 0x8d, 0xe6, 0x82, 0xa3, 0x2f, 0xbc, 0xd7, 0x02, 0x54, 0xfb, 0x06, 0xb2, 0xbe, 0x95, 0x55, 0xd1, 0x26, 0x6f, 0xbb, 0xd5, 0x58, 0x7d, 0x0d, 0x52, 0x50, 0x00, 0x00, 0x07, 0xa3, 0xf8, 0x65, 0xa0, 0xd5, 0x73, 0xa7, 0x4f, 0xa1, 0xda, 0x52, 0xed, 0x56, 0xcf, 0xea, 0xdb, 0x80, 0xf7, 0x58, 0x7d, 0x3f, 0x97, 0xcf, 0x03, 0x05, 0x00, 0x70, 0x30, 0x15, 0xbb, 0x02, 0x47, 0xe3, 0xd9, 0xbb, 0xf4, 0xbf, 0x7a, 0xfc, 0x00, 0xd3, 0x40, 0x01, 0x00, 0x1c, 0xcc, 0x1d, 0x7e, 0x1b, 0x10, 0xce, 0x60, 0x96, 0x6f, 0x69, 0x4a, 0x86, 0xdd, 0x5d, 0x40, 0x01, 0x00, 0x1c, 0x4c, 0xa5, 0x02, 0x28, 0xcd, 0x60, 0x9a, 0xd0, 0x7f, 0xd5, 0xf8, 0xa3, 0xf1, 0xff, 0xe8, 0xea, 0xb5, 0x5d, 0xea, 0x8d, 0xf0, 0x66, 0x7e, 0x46, 0x59, 0x12, 0x6f, 0xdf, 0x15, 0x14, 0x00, 0xc0, 0xc1, 0x28, 0x15, 0x80, 0x37, 0x23, 0xac, 0xfa, 0xcb, 0xee, 0xed, 0x3f, 0x5a, 0x3f, 0x1a, 0x87, 0x6d, 0xc9, 0x5a, 0xce, 0xdd, 0xeb, 0x41, 0x2d, 0x56, 0xdf, 0xc6, 0xcb, 0xf3, 0x43, 0x01, 0x00, 0x1c, 0x0c, 0x51, 0x00, 0x1d, 0xde, 0x2f, 0xf0, 0x69, 0x73, 0xce, 0x55, 0xfb, 0x4b, 0xc0, 0x1b, 0x50, 0x00, 0x00, 0x07, 0x53, 0xa9, 0x00, 0x56, 0x5b, 0xb8, 0x6c, 0xff, 0xea, 0x1d, 0x89, 0x4e, 0xb7, 0x74, 0xa7, 0x5f, 0xff, 0x96, 0xa0, 0x00, 0x00, 0x0e, 0x46, 0xa1, 0x00, 0xa2, 0xab, 0x09, 0x7b, 0x3b, 0xeb, 0xb8, 0x56, 0x33, 0x09, 0xfa, 0x6f, 0x89, 0x8e, 0xbf, 0xd7, 0x0e, 0xab, 0xde, 0x60, 0x5b, 0x50, 0x00, 0x00, 0x07, 0xf3, 0xfd, 0xd0, 0x5b, 0xe0, 0x28, 0xa1, 0x38, 0xe6, 0x86, 0x64, 0x95, 0x85, 0xaa, 0xbf, 0xdd, 0xea, 0x59, 0xa9, 0x52, 0x4e, 0xea, 0x9d, 0xae, 0x54, 0x51, 0x9f, 0xec, 0xb8, 0x52, 0x3b, 0x44, 0xa1, 0x00, 0x00, 0x0e, 0xc6, 0xf2, 0xdb, 0x80, 0xff, 0xd4, 0x49, 0x96, 0x1f, 0xd5, 0xab, 0x2a, 0xaf, 0xda, 0xe9, 0x48, 0x65, 0xe1, 0x57, 0xb5, 0xef, 0xed, 0x47, 0xad, 0x68, 0xb2, 0xcf, 0x4b, 0x3d, 0x6e, 0xaf, 0xe5, 0xce, 0xfa, 0x9e, 0xb2, 0xe5, 0xb3, 0xca, 0x18, 0x05, 0x00, 0x00, 0xbf, 0x58, 0xf6, 0x04, 0xb4, 0x5a, 0xf8, 0xec, 0x5c, 0x46, 0x55, 0xde, 0xbb, 0xa3, 0x8f, 0xb7, 0xbc, 0xd7, 0xf7, 0xb1, 0x5b, 0xfb, 0x3d, 0xbc, 0xbf, 0x67, 0xe0, 0x45, 0xf5, 0xbc, 0xac, 0xe3, 0x89, 0x8e, 0x3b, 0xbb, 0x6b, 0x73, 0x15, 0x23, 0x45, 0x30, 0x7a, 0xde, 0xec, 0x09, 0x08, 0x00, 0xaf, 0x7c, 0xfd, 0xfc, 0xeb, 0x04, 0xf0, 0xee, 0xb3, 0x9e, 0xf5, 0x19, 0x54, 0xcd, 0x9d, 0x67, 0x8d, 0x33, 0x3a, 0x47, 0x54, 0x5d, 0x57, 0x55, 0xb9, 0x1e, 0xb3, 0xae, 0xab, 0xfa, 0xba, 0x5b, 0xd4, 0xf7, 0x41, 0x5d, 0xbe, 0x45, 0xf2, 0x9e, 0xa1, 0x00, 0x00, 0x0e, 0x26, 0xa3, 0x00, 0x54, 0x5f, 0x70, 0x15, 0xbb, 0x8d, 0x07, 0xce, 0x60, 0x96, 0xf2, 0x54, 0x1d, 0x7f, 0x01, 0x05, 0x00, 0x70, 0x30, 0x99, 0xb5, 0x00, 0x23, 0x0b, 0x9a, 0x9d, 0x8b, 0x65, 0xbf, 0xac, 0xa3, 0xf1, 0xa8, 0x94, 0x8f, 0xb7, 0x1f, 0xca, 0xc7, 0xca, 0xaf, 0x52, 0xaa, 0xbb, 0x28, 0xc7, 0x51, 0xe6, 0x61, 0x28, 0x1a, 0x87, 0x02, 0x00, 0x38, 0x98, 0x8a, 0xd5, 0x80, 0x2d, 0xde, 0x2f, 0x71, 0x34, 0xce, 0x5a, 0xbd, 0x96, 0x20, 0x3b, 0x7e, 0xca, 0x6b, 0xcb, 0xef, 0x82, 0x35, 0x1e, 0x3f, 0x52, 0x16, 0x56, 0xcb, 0x9d, 0x8d, 0x46, 0xbd, 0x9c, 0x47, 0x01, 0x00, 0x1c, 0x4c, 0x46, 0x01, 0x78, 0x2d, 0x62, 0x76, 0x0e, 0x6f, 0x65, 0xf4, 0x85, 0xcc, 0x2a, 0x8c, 0xb6, 0x3d, 0x2b, 0xea, 0xf2, 0xb3, 0xc7, 0x03, 0x3e, 0xb2, 0x99, 0x9c, 0xd1, 0x7e, 0xac, 0xd1, 0x81, 0x9f, 0xc7, 0x03, 0x05, 0x00, 0x70, 0x34, 0xca, 0x28, 0x40, 0xf4, 0x8b, 0xa7, 0xca, 0x35, 0x9f, 0x85, 0x2a, 0x3a, 0x60, 0x6d, 0x77, 0x97, 0xf1, 0xc0, 0x7b, 0xbc, 0x5e, 0xf8, 0xec, 0x1a, 0x1a, 0x49, 0x74, 0x02, 0x05, 0x00, 0x70, 0x30, 0x57, 0x0a, 0x60, 0xf4, 0xe5, 0x6f, 0xe7, 0xf4, 0x56, 0x0b, 0x54, 0x1d, 0x4f, 0xbd, 0x7b, 0xfb, 0x5e, 0x76, 0x1b, 0x0f, 0xcc, 0x41, 0xfa, 0xdc, 0x51, 0x00, 0x00, 0x07, 0x73, 0xa5, 0x00, 0xa6, 0xce, 0x41, 0x84, 0x78, 0xf3, 0x00, 0x56, 0xcf, 0x71, 0x77, 0xf3, 0xda, 0xaf, 0xbe, 0x1f, 0xf0, 0x1e, 0xef, 0xdf, 0x9b, 0x29, 0x73, 0x10, 0x05, 0x00, 0x70, 0x30, 0x33, 0x7f, 0x1b, 0xd0, 0x6a, 0xa1, 0xa3, 0xe5, 0x7b, 0xf5, 0xda, 0xe3, 0xb3, 0xc6, 0x13, 0xcd, 0x4c, 0xac, 0xca, 0x98, 0xdb, 0x65, 0x3c, 0x9f, 0x96, 0x21, 0x68, 0xf5, 0x99, 0x3d, 0x89, 0x2a, 0x65, 0x75, 0x1e, 0x0d, 0x79, 0x00, 0x00, 0xa7, 0x63, 0xd9, 0x0f, 0x60, 0xc4, 0xac, 0x2f, 0xf1, 0xec, 0x38, 0xfa, 0xec, 0x76, 0x47, 0xa8, 0xe3, 0xf6, 0xea, 0x55, 0x6f, 0xd9, 0xbc, 0x03, 0x6f, 0x7b, 0xb3, 0xa9, 0xda, 0x89, 0x49, 0xf5, 0x7e, 0xb5, 0x98, 0xda, 0x41, 0x01, 0x00, 0x1c, 0xcc, 0xdf, 0x5f, 0x06, 0x6a, 0x51, 0x7d, 0x81, 0xab, 0x2d, 0x6a, 0x2f, 0x2f, 0xa1, 0xb7, 0x06, 0xc1, 0x3a, 0x8e, 0xe8, 0xf5, 0xab, 0x15, 0x85, 0x77, 0x4d, 0x45, 0xb6, 0xbd, 0x5d, 0x51, 0xad, 0xe2, 0xf4, 0xb6, 0xab, 0xba, 0x5f, 0xa3, 0xf7, 0x33, 0xfb, 0xde, 0x86, 0xde, 0x57, 0x14, 0x00, 0xc0, 0xc1, 0x54, 0xee, 0x08, 0xd4, 0x52, 0x65, 0x51, 0xbd, 0x73, 0xa9, 0x6c, 0xae, 0x76, 0x8f, 0xa8, 0xe5, 0x1f, 0x79, 0xbf, 0xb3, 0xde, 0xfb, 0x68, 0x7b, 0x56, 0x8b, 0x67, 0xcd, 0xb7, 0x88, 0xb6, 0xa7, 0xde, 0xbf, 0x61, 0x37, 0xdf, 0xc2, 0x13, 0xab, 0x42, 0x68, 0xcb, 0xa7, 0x40, 0x01, 0x00, 0x1c, 0x8c, 0x65, 0x2d, 0x80, 0xea, 0xcb, 0xa9, 0xb6, 0xa8, 0x6d, 0xb9, 0x25, 0x5f, 0x50, 0x61, 0xbb, 0x3d, 0x0b, 0x1e, 0x55, 0x5a, 0xaa, 0xf6, 0xb2, 0x58, 0x95, 0x40, 0xb5, 0xe5, 0x57, 0x33, 0x52, 0x4e, 0xd1, 0xfe, 0x4d, 0x19, 0x7c, 0x06, 0x4c, 0xbe, 0x0f, 0x14, 0x00, 0xc0, 0xc1, 0xcc, 0xcc, 0x04, 0xb4, 0x92, 0xcd, 0x79, 0xb6, 0x1e, 0xcf, 0xb2, 0xdb, 0x5a, 0x88, 0x11, 0x59, 0x8b, 0xaa, 0xca, 0x63, 0xf0, 0xfa, 0x32, 0xac, 0xcc, 0x7e, 0x1e, 0xd5, 0xef, 0x57, 0x16, 0xf2, 0x00, 0x00, 0xe0, 0x3d, 0xca, 0x3d, 0x01, 0x5b, 0xb2, 0x51, 0x82, 0xe8, 0xdc, 0xc9, 0xda, 0x9e, 0x37, 0x1a, 0x30, 0xaa, 0xa7, 0xce, 0xa4, 0xdb, 0xc5, 0x92, 0xa8, 0x51, 0x5b, 0xce, 0x59, 0x99, 0xac, 0xb3, 0x9e, 0xc7, 0xe8, 0xfd, 0x92, 0xfa, 0x72, 0x50, 0x00, 0x00, 0x07, 0xf3, 0x57, 0x01, 0x44, 0xe7, 0xde, 0x5e, 0xaa, 0x2c, 0x75, 0xb4, 0x3d, 0x2b, 0xea, 0x4c, 0xc4, 0x96, 0xea, 0x38, 0x75, 0x76, 0x3c, 0xd6, 0x78, 0xff, 0x2c, 0xaa, 0xa2, 0x2f, 0xbd, 0x7e, 0xaa, 0xa3, 0x28, 0xde, 0x7c, 0x17, 0xc9, 0x78, 0x50, 0x00, 0x00, 0x07, 0xb3, 0x32, 0x0a, 0xa0, 0xb6, 0xd4, 0xea, 0x4c, 0x3c, 0x6b, 0xbb, 0x6a, 0x8b, 0xd0, 0x53, 0x16, 0xd1, 0xfa, 0xed, 0xf1, 0xbb, 0x73, 0xd7, 0xeb, 0x52, 0xf9, 0x8e, 0xac, 0xca, 0xcc, 0x04, 0x0a, 0x00, 0xe0, 0x60, 0xde, 0x29, 0x80, 0xea, 0xb9, 0xe8, 0x93, 0xac, 0xa5, 0xae, 0xca, 0x94, 0x52, 0xfb, 0x1e, 0xbc, 0x73, 0x38, 0xab, 0x85, 0xe8, 0xb5, 0xa7, 0x5a, 0x4d, 0xb6, 0x8b, 0xa2, 0x58, 0xdd, 0xbf, 0x15, 0x75, 0x74, 0xac, 0x14, 0x14, 0x00, 0xc0, 0xc1, 0x7c, 0x3f, 0xe2, 0xab, 0xe8, 0xbc, 0xa8, 0x2d, 0x75, 0x36, 0x6a, 0xa1, 0x6a, 0xd7, 0xbb, 0x9a, 0x2e, 0x3a, 0x87, 0xb3, 0x2a, 0x85, 0xdd, 0xe2, 0xda, 0x55, 0xcc, 0x8a, 0x3a, 0x44, 0x95, 0x5b, 0x8b, 0xca, 0x7b, 0xef, 0x55, 0x84, 0x3d, 0x58, 0x0b, 0x00, 0x70, 0x3a, 0x9e, 0x3d, 0x01, 0x55, 0x5f, 0xdc, 0xea, 0x0c, 0x39, 0xaf, 0xb7, 0x35, 0x7a, 0x5d, 0xd1, 0xb9, 0x71, 0x36, 0xfa, 0xa1, 0xca, 0xc9, 0xb7, 0x8e, 0xa7, 0x65, 0xf5, 0xf8, 0x47, 0x44, 0x15, 0x5b, 0x55, 0xfd, 0x59, 0x79, 0x2e, 0xa1, 0xbf, 0x63, 0x14, 0x00, 0xc0, 0xc1, 0x44, 0x7e, 0x1b, 0xf0, 0x49, 0xd6, 0x52, 0x58, 0xeb, 0xa9, 0xda, 0xb5, 0xe2, 0xcd, 0x0c, 0x53, 0x11, 0xf5, 0xf6, 0xb7, 0x64, 0xe7, 0xa0, 0xd1, 0x39, 0xea, 0xac, 0x68, 0xc5, 0xa8, 0xdc, 0x2e, 0xcc, 0x8a, 0x5a, 0xa4, 0xf2, 0x08, 0x50, 0x00, 0x00, 0x07, 0x13, 0xf9, 0x6d, 0xc0, 0xaa, 0xdc, 0xe8, 0xec, 0x5c, 0xc9, 0xea, 0xd5, 0x1f, 0x1d, 0xf7, 0x62, 0xf5, 0x12, 0x67, 0xe7, 0x6e, 0xd9, 0x0c, 0x30, 0x6f, 0x7d, 0xeb, 0xf3, 0xcd, 0x8e, 0x7f, 0x75, 0x34, 0x42, 0xfd, 0xfc, 0xee, 0x92, 0xaf, 0x40, 0x14, 0x00, 0xe0, 0x74, 0x2a, 0xd6, 0x02, 0x78, 0xe3, 0xe2, 0x59, 0x5f, 0x41, 0x3b, 0x97, 0x9c, 0x15, 0x05, 0x00, 0x78, 0x87, 0x2a, 0xce, 0x5f, 0x0a, 0x0a, 0x00, 0xe0, 0x60, 0x76, 0xdc, 0x13, 0xb0, 0x65, 0x77, 0x0b, 0x1d, 0xf5, 0x31, 0xec, 0x7a, 0x5d, 0xbb, 0xce, 0xd5, 0xef, 0x46, 0x76, 0x35, 0xe7, 0xa8, 0x5d, 0xef, 0x38, 0x2e, 0x41, 0x01, 0x00, 0x1c, 0x4c, 0x65, 0x1e, 0x40, 0xd5, 0xfa, 0x7e, 0x6f, 0x0e, 0xbf, 0x2a, 0xb7, 0xbf, 0x45, 0xe5, 0x1d, 0xdf, 0x55, 0x09, 0x9c, 0x86, 0xd5, 0x27, 0x14, 0x5d, 0xaf, 0xbf, 0x4a, 0x41, 0xbd, 0xfd, 0x3b, 0x44, 0x01, 0x00, 0x1c, 0x8c, 0x32, 0x0f, 0xc0, 0x6a, 0xc9, 0x56, 0x7f, 0x11, 0x47, 0x64, 0x33, 0xe0, 0xb2, 0xe5, 0x76, 0x41, 0xba, 0xf3, 0xcc, 0x0d, 0xc9, 0x5e, 0xef, 0x6e, 0x4a, 0xe0, 0x12, 0x14, 0x00, 0xc0, 0xc1, 0xec, 0x18, 0x05, 0x50, 0xaf, 0xc7, 0xef, 0x1d, 0x57, 0x7d, 0x89, 0x3f, 0x35, 0x97, 0x5d, 0xc5, 0xa7, 0x5f, 0xdf, 0x88, 0x6a, 0x25, 0x90, 0x6a, 0x1f, 0x05, 0x00, 0x70, 0x30, 0x95, 0x0a, 0x40, 0x35, 0x87, 0xb2, 0x96, 0x53, 0x45, 0x01, 0x66, 0xa3, 0xce, 0x45, 0xef, 0x11, 0xad, 0xef, 0xdd, 0x33, 0xd0, 0x9b, 0xa1, 0x99, 0x25, 0x7b, 0xff, 0x46, 0xed, 0x8d, 0xca, 0x5b, 0xa9, 0xf6, 0xa9, 0x58, 0xdb, 0x67, 0x35, 0x20, 0x00, 0xfc, 0xa2, 0x50, 0x00, 0xd1, 0x39, 0xbb, 0x37, 0x8a, 0xb0, 0xbb, 0x25, 0xcf, 0xe2, 0xfd, 0x82, 0xf7, 0xc8, 0xc6, 0xb1, 0x47, 0xf5, 0xbc, 0x4a, 0xa0, 0xc7, 0xac, 0xb9, 0x70, 0xaf, 0x9c, 0x0a, 0x6f, 0xbf, 0xd6, 0x7c, 0x16, 0xef, 0x6a, 0xd7, 0x50, 0xfb, 0x28, 0x00, 0x80, 0x83, 0xb9, 0xda, 0x13, 0xd0, 0x5c, 0xf7, 0xbf, 0x7f, 0xab, 0x32, 0xed, 0x46, 0xfd, 0x5a, 0xdb, 0x53, 0xcf, 0xe9, 0xac, 0x96, 0xa5, 0xda, 0xfb, 0x1d, 0xed, 0x2f, 0x9a, 0xf1, 0xe6, 0xb5, 0xa8, 0x51, 0x25, 0xa2, 0x8a, 0x9e, 0xa8, 0x7d, 0x1c, 0xde, 0x7e, 0x6f, 0x51, 0x1e, 0x05, 0x00, 0x70, 0x30, 0x15, 0x3b, 0x02, 0xcd, 0xb2, 0xc8, 0xb3, 0xe3, 0xcb, 0x23, 0x2f, 0xfa, 0x68, 0x4e, 0xeb, 0xdd, 0xe7, 0xa0, 0x57, 0xcf, 0x3b, 0xc7, 0x6d, 0xcb, 0xa9, 0xda, 0xb7, 0xfa, 0x72, 0x46, 0xed, 0x67, 0x9f, 0xbb, 0x75, 0xfc, 0xd6, 0x1d, 0x7c, 0x56, 0x93, 0x55, 0x92, 0xae, 0xfb, 0x89, 0x02, 0x00, 0x38, 0x18, 0x65, 0x1e, 0x40, 0xd6, 0xb2, 0xa8, 0xfa, 0xb1, 0xf6, 0x57, 0xe5, 0x2d, 0x3f, 0x05, 0xef, 0xde, 0x7f, 0xa3, 0x7a, 0xd6, 0xf3, 0x5e, 0xda, 0xf6, 0x54, 0xf1, 0xfc, 0x27, 0xb3, 0x7d, 0x3d, 0x52, 0x50, 0x00, 0x00, 0x07, 0xf3, 0xfd, 0xd0, 0x67, 0xa2, 0x79, 0x33, 0xac, 0x56, 0x61, 0x55, 0x0e, 0x28, 0x81, 0xb9, 0x54, 0xe5, 0x7b, 0x54, 0x7b, 0xd7, 0x67, 0x93, 0x8d, 0x96, 0x90, 0x07, 0x00, 0x70, 0x3a, 0x2b, 0x56, 0x03, 0xce, 0x52, 0x02, 0xea, 0xb9, 0x5a, 0x76, 0x6e, 0xbb, 0x8b, 0x45, 0x89, 0x66, 0xcc, 0x59, 0x95, 0x51, 0x36, 0x5a, 0x12, 0x25, 0xaa, 0x50, 0xb3, 0xf7, 0x41, 0x8d, 0x75, 0xbc, 0xbd, 0xf3, 0x2d, 0x6f, 0xc7, 0x8f, 0x02, 0x00, 0x38, 0x98, 0xbf, 0x0a, 0x60, 0x55, 0x2e, 0xb5, 0x97, 0xac, 0x25, 0x8e, 0x92, 0xbd, 0x1f, 0xab, 0xef, 0xdb, 0x13, 0x55, 0xb4, 0xa6, 0x67, 0xc9, 0xad, 0x79, 0x02, 0xde, 0xfc, 0x81, 0x11, 0x51, 0x5f, 0x56, 0xaf, 0x1d, 0x6b, 0x79, 0x2f, 0x59, 0x05, 0xd6, 0x3b, 0x1f, 0x02, 0x05, 0x00, 0x70, 0x30, 0x3b, 0xee, 0x08, 0x64, 0xc5, 0x9b, 0x01, 0x16, 0xc5, 0x3b, 0xa7, 0x55, 0x5b, 0x8c, 0xd5, 0x73, 0xd3, 0xa8, 0x85, 0xb6, 0x2a, 0xb5, 0x55, 0x0a, 0xce, 0xba, 0x6a, 0xce, 0x5a, 0xde, 0x8b, 0xd7, 0x47, 0xd1, 0x3b, 0x9f, 0x02, 0x05, 0x00, 0x70, 0x30, 0xef, 0xd6, 0x02, 0xcc, 0xfa, 0x32, 0xab, 0xf0, 0x5a, 0x44, 0xd5, 0x2a, 0xb1, 0x6a, 0xaf, 0x70, 0xd6, 0xc7, 0xb0, 0x4b, 0xde, 0x45, 0x94, 0x59, 0x99, 0xa3, 0xd1, 0xf2, 0x59, 0xd4, 0x51, 0x12, 0xd7, 0xf8, 0x51, 0x00, 0x00, 0x07, 0xb3, 0xc2, 0x07, 0x30, 0xfb, 0x8b, 0xde, 0xa3, 0xea, 0xcb, 0xbe, 0x5b, 0xc6, 0x63, 0x16, 0xef, 0x1c, 0xb5, 0x65, 0x76, 0x1c, 0x7d, 0x36, 0x2a, 0xaf, 0x7e, 0xaf, 0x5c, 0x8b, 0x57, 0xb9, 0x92, 0x09, 0x08, 0x00, 0xd7, 0x7c, 0x5d, 0x6c, 0x08, 0x14, 0xb5, 0xb0, 0x6a, 0x4b, 0x11, 0xed, 0x47, 0xdd, 0x9f, 0xb5, 0xbd, 0x2a, 0xaa, 0xa3, 0x18, 0xa3, 0x7e, 0xad, 0xd7, 0x3d, 0x6b, 0x67, 0x9b, 0x6c, 0xc6, 0xdf, 0x88, 0xec, 0x75, 0xf7, 0xc8, 0xde, 0x8f, 0xa8, 0x82, 0x40, 0x01, 0x00, 0xc0, 0x35, 0x7f, 0x15, 0x80, 0x6a, 0x6e, 0xad, 0xb6, 0x2c, 0xd9, 0xfa, 0x2a, 0x4b, 0x63, 0xc5, 0x6b, 0x61, 0x9f, 0xa8, 0xc6, 0x65, 0x8d, 0x5e, 0xf4, 0xfa, 0x5d, 0xbd, 0xa6, 0x41, 0x65, 0x29, 0xb3, 0xcf, 0xaf, 0x87, 0xfa, 0x7e, 0x59, 0xb1, 0x2a, 0x20, 0x14, 0x00, 0x00, 0xd8, 0xf8, 0x7e, 0xcc, 0xcf, 0x44, 0xca, 0x5a, 0x30, 0x6b, 0xe6, 0x5d, 0xf4, 0x7c, 0xf6, 0x0b, 0x3f, 0x6b, 0xf5, 0x99, 0x75, 0xfc, 0xa7, 0xa1, 0xf2, 0x05, 0xcc, 0x26, 0x3b, 0xce, 0xde, 0x7b, 0x4a, 0x1e, 0x00, 0x00, 0x5c, 0x53, 0xb9, 0x27, 0x60, 0x8f, 0xec, 0x1c, 0xcb, 0xba, 0xda, 0xcb, 0x9a, 0x51, 0xa5, 0xce, 0xb8, 0xaa, 0xb6, 0x30, 0xbd, 0xd5, 0x77, 0xaa, 0xf6, 0x76, 0x23, 0xba, 0xde, 0xfd, 0xd3, 0x88, 0x2a, 0xe2, 0xb7, 0xc7, 0x51, 0x00, 0x00, 0x07, 0xf3, 0x77, 0x4f, 0xc0, 0x1e, 0xb3, 0xbc, 0x9c, 0x56, 0xbc, 0x5e, 0xe0, 0xe8, 0x6a, 0xbd, 0x59, 0x96, 0xb1, 0x3a, 0xda, 0x12, 0x2d, 0x1f, 0x25, 0x1b, 0x9f, 0x1e, 0xb5, 0x57, 0x6d, 0xf1, 0xa3, 0x19, 0x7a, 0xa3, 0xfa, 0x59, 0x4a, 0xd6, 0xe8, 0xa0, 0x00, 0x00, 0x0e, 0xe6, 0xaf, 0x0f, 0x60, 0x96, 0x85, 0x50, 0xa3, 0x9e, 0x03, 0x5b, 0x7d, 0x0c, 0xaa, 0xfe, 0x7b, 0x64, 0x33, 0xde, 0xa2, 0x51, 0x86, 0xea, 0xfb, 0x69, 0x2d, 0xbf, 0x8a, 0xe8, 0xda, 0x85, 0x5b, 0x46, 0x1f, 0x50, 0x00, 0x00, 0x07, 0xe3, 0xc9, 0x03, 0x88, 0x7a, 0x1b, 0x5b, 0xbc, 0x73, 0x2c, 0x95, 0xe5, 0x98, 0xf5, 0x05, 0xce, 0xee, 0x13, 0x30, 0x4b, 0x61, 0x80, 0x06, 0xeb, 0xf3, 0xda, 0x52, 0x11, 0xa0, 0x00, 0x00, 0x0e, 0xe6, 0x2a, 0x0f, 0x60, 0x76, 0x1c, 0x5b, 0x95, 0x19, 0x37, 0x2a, 0x3f, 0x9b, 0x4f, 0xdd, 0xa1, 0x67, 0x77, 0x66, 0xed, 0xd4, 0xd4, 0xeb, 0xf7, 0x56, 0xa0, 0x00, 0x00, 0x0e, 0xe6, 0xdd, 0x9e, 0x80, 0x3d, 0xbc, 0x73, 0xd4, 0x5b, 0x7e, 0x19, 0x2f, 0x98, 0x35, 0x37, 0x5f, 0x7d, 0xbf, 0x3e, 0xc5, 0x07, 0x31, 0x5b, 0x81, 0xa9, 0xa2, 0x28, 0x53, 0x41, 0x01, 0x00, 0x1c, 0x8c, 0x62, 0x2d, 0x00, 0x73, 0xda, 0x57, 0xb2, 0x16, 0xf4, 0x53, 0x2c, 0xf0, 0x2a, 0x66, 0xdf, 0xbf, 0x51, 0xe6, 0xe9, 0xd6, 0xa0, 0x00, 0x00, 0x0e, 0xc6, 0xa2, 0x00, 0xaa, 0xd7, 0xc7, 0x7f, 0x1a, 0xae, 0x5d, 0x59, 0x27, 0xb6, 0x5f, 0x55, 0xde, 0xba, 0x1f, 0x41, 0x34, 0xc3, 0xce, 0xeb, 0xd5, 0xf7, 0xde, 0x9f, 0xaa, 0x1d, 0x7b, 0x46, 0x4a, 0xc0, 0xeb, 0xa3, 0xe8, 0xe5, 0xe1, 0x78, 0xd7, 0xb6, 0xbc, 0x94, 0x47, 0x01, 0x00, 0x1c, 0xcc, 0xbb, 0x3d, 0x01, 0xff, 0x29, 0x6b, 0x6c, 0x33, 0x9a, 0x21, 0x98, 0x5d, 0xbd, 0xa6, 0x2e, 0xbf, 0x1a, 0x95, 0xef, 0x20, 0x7b, 0x9d, 0xd5, 0x96, 0xb2, 0x3d, 0xde, 0x23, 0xfb, 0x7e, 0x66, 0xdf, 0x4b, 0xd5, 0x7d, 0xec, 0x8d, 0xa7, 0xba, 0xfc, 0xe5, 0x79, 0x14, 0x00, 0xc0, 0xc1, 0x5c, 0xad, 0x05, 0xe8, 0x61, 0x9d, 0xdb, 0x79, 0xd7, 0xe3, 0x87, 0xf6, 0x32, 0x7b, 0x33, 0xae, 0x59, 0x3b, 0xf3, 0xcc, 0x26, 0x6b, 0x31, 0x43, 0x16, 0xe2, 0xa2, 0x9c, 0xaa, 0x3d, 0xeb, 0x9c, 0xb9, 0xea, 0xf9, 0x46, 0xc7, 0x6b, 0x6d, 0x6f, 0x57, 0xf0, 0x01, 0x00, 0xc0, 0x2f, 0x2b, 0xf7, 0x04, 0xcc, 0xc6, 0x4d, 0xb3, 0xd1, 0x85, 0xd5, 0x3e, 0x81, 0x91, 0x17, 0x38, 0x6a, 0x79, 0xa2, 0x19, 0x70, 0xab, 0xd7, 0x4c, 0x78, 0x15, 0x47, 0xb5, 0x82, 0xf8, 0x34, 0x05, 0x7a, 0xa9, 0xbc, 0x50, 0x00, 0x00, 0x07, 0x63, 0x59, 0x0b, 0x10, 0xdd, 0x09, 0xa5, 0x17, 0x1f, 0xfe, 0xea, 0x94, 0x53, 0x59, 0x3c, 0x6b, 0x1c, 0xf5, 0x14, 0xac, 0xcf, 0x67, 0xf5, 0x1c, 0xb7, 0x64, 0xcf, 0x3b, 0x47, 0x7f, 0xde, 0x7c, 0x8d, 0xbb, 0xe5, 0xb7, 0x90, 0x07, 0x00, 0x00, 0xaf, 0xcc, 0xd8, 0x0f, 0xc0, 0xba, 0x5a, 0x30, 0x3a, 0x97, 0x1b, 0xb5, 0x67, 0x1d, 0xc7, 0xae, 0x8c, 0x14, 0x8d, 0xb5, 0xde, 0xee, 0xd7, 0x1f, 0x55, 0x6e, 0x59, 0x4b, 0xee, 0xf5, 0xc5, 0xdc, 0xed, 0xbe, 0xb6, 0xbc, 0x8c, 0x17, 0x05, 0x00, 0x70, 0x30, 0xca, 0x28, 0x40, 0x96, 0xea, 0x1c, 0xfa, 0xbb, 0x60, 0xb5, 0x34, 0xd5, 0x96, 0x68, 0x96, 0x17, 0x5b, 0x15, 0x8f, 0xf7, 0x5a, 0x68, 0x75, 0x5e, 0x45, 0x96, 0xea, 0x35, 0x0c, 0x97, 0xe5, 0x51, 0x00, 0x00, 0x07, 0x53, 0xa1, 0x00, 0xaa, 0xe2, 0xfa, 0xd9, 0xbc, 0x81, 0x51, 0x7f, 0xb3, 0xd9, 0xc5, 0xa2, 0x3c, 0x06, 0xe7, 0xab, 0xe2, 0xda, 0x51, 0x9f, 0x8e, 0xea, 0xf9, 0x67, 0x2d, 0xae, 0x77, 0x0d, 0x41, 0x34, 0x4f, 0xa6, 0x34, 0x5f, 0x05, 0x05, 0x00, 0x70, 0x30, 0x33, 0x7c, 0x00, 0xaa, 0xb9, 0xec, 0xad, 0x77, 0x5e, 0x09, 0x10, 0xbd, 0xae, 0xe8, 0xea, 0x36, 0xaf, 0xe2, 0x52, 0x3d, 0x57, 0x75, 0x3f, 0x23, 0xaa, 0xcb, 0xab, 0xeb, 0x8d, 0xf2, 0x67, 0xac, 0x90, 0x07, 0x00, 0x00, 0xaf, 0x7c, 0xfd, 0xfc, 0xd9, 0x10, 0xa0, 0x57, 0xa6, 0xf9, 0xbf, 0x2a, 0xb7, 0x3a, 0x3b, 0x07, 0x8e, 0x5a, 0xa0, 0x5d, 0x73, 0xb7, 0xd5, 0xe3, 0xcf, 0xb6, 0xd7, 0xab, 0xd7, 0x92, 0xbd, 0x7f, 0xa3, 0xfa, 0xaa, 0xf6, 0x9f, 0xa8, 0xde, 0x3b, 0xeb, 0xb8, 0x47, 0xed, 0xf4, 0x50, 0x3f, 0x9f, 0x4b, 0x50, 0x00, 0x00, 0x07, 0x13, 0xd9, 0x13, 0xd0, 0x4a, 0x75, 0x0e, 0xf5, 0xc8, 0x27, 0x60, 0xdd, 0x97, 0x20, 0xfb, 0x25, 0x56, 0x59, 0x3e, 0xaf, 0x05, 0xf4, 0xc6, 0xbd, 0xbd, 0xf7, 0x63, 0x34, 0xe7, 0xec, 0xad, 0xce, 0x7b, 0x92, 0x7d, 0xce, 0x2a, 0x0b, 0x78, 0x17, 0xbc, 0x99, 0x8a, 0xd6, 0xf3, 0x6f, 0x41, 0x01, 0x00, 0x1c, 0x8c, 0x32, 0x0a, 0x30, 0x3b, 0x13, 0xad, 0xb5, 0x50, 0xbd, 0x7a, 0x2a, 0x1f, 0x86, 0x97, 0x5e, 0x3c, 0xd7, 0x3a, 0x67, 0x1c, 0x8d, 0xd3, 0x6a, 0xc1, 0xad, 0xed, 0x59, 0xc7, 0xd1, 0x1e, 0x57, 0x97, 0x1f, 0xdd, 0x37, 0x75, 0xf4, 0x67, 0xb6, 0x97, 0xff, 0xc9, 0x16, 0xd1, 0x2b, 0x14, 0x00, 0xc0, 0xc1, 0x7c, 0x3f, 0xf2, 0x5e, 0x7c, 0x75, 0xce, 0xfe, 0xec, 0x8c, 0x40, 0x2b, 0xd6, 0x7e, 0xaa, 0xc7, 0x93, 0xf5, 0x6d, 0xa8, 0xd6, 0x1a, 0x8c, 0x9e, 0xc3, 0xa8, 0x3d, 0xab, 0x52, 0xf0, 0xfa, 0x12, 0x4a, 0xe7, 0xcc, 0x9f, 0x06, 0x0a, 0x00, 0xe0, 0x60, 0xae, 0xf2, 0x00, 0xb2, 0x71, 0x46, 0x95, 0x65, 0x99, 0x85, 0xba, 0xff, 0x5e, 0x7b, 0x5e, 0x9f, 0x40, 0xaf, 0x3d, 0x00, 0x19, 0x28, 0x00, 0x80, 0x83, 0xb1, 0x44, 0x01, 0xb2, 0x19, 0x4d, 0xd9, 0xf3, 0xd5, 0x19, 0x82, 0x23, 0x5f, 0x42, 0xf6, 0xfa, 0x47, 0xfd, 0xf6, 0xfa, 0x39, 0x65, 0xcd, 0x03, 0x2c, 0x04, 0x05, 0x00, 0x70, 0x30, 0x99, 0x3c, 0x00, 0x75, 0x4e, 0x7a, 0xef, 0xfc, 0x2e, 0x44, 0x33, 0xdb, 0xac, 0x19, 0x91, 0xd6, 0x7a, 0x00, 0x32, 0x50, 0x00, 0x00, 0x07, 0x13, 0x51, 0x00, 0xaa, 0x5c, 0xfe, 0x28, 0xde, 0x9c, 0x74, 0x55, 0xbb, 0x51, 0x76, 0x55, 0x34, 0x00, 0x28, 0x00, 0x80, 0x93, 0xa9, 0x5c, 0x0d, 0x18, 0x25, 0x9b, 0xd1, 0xe6, 0x6d, 0xbf, 0x3d, 0xfe, 0xe8, 0x9c, 0xb7, 0x62, 0x1d, 0x2f, 0x73, 0x7c, 0x58, 0x0e, 0x0a, 0x00, 0xe0, 0x60, 0xbe, 0xfe, 0x24, 0x02, 0x66, 0x33, 0xfe, 0xac, 0xf5, 0x76, 0x23, 0xbb, 0xc3, 0x51, 0x54, 0xa1, 0xec, 0x7e, 0x5f, 0xe0, 0x00, 0x50, 0x00, 0x00, 0x07, 0xf3, 0x35, 0xde, 0x12, 0xf0, 0xe3, 0xc8, 0xae, 0x92, 0x03, 0xf8, 0x18, 0x50, 0x00, 0x00, 0x07, 0xf3, 0x7f, 0x5a, 0x64, 0x2e, 0x4d, 0x55, 0x5d, 0x9a, 0x46, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82 };
#pragma endregion Do not hover. There be dragons here!

    auto font_system32 = std::make_unique<KerningFont>(_renderer);
    if(font_system32->LoadFromBuffer(raw_system32_font)) {
        std::string tex_name = "__Font_";
        {
            std::unique_ptr<Texture> tex;
            {
                auto img = Image::CreateImageFromFileBuffer(raw_system32_image);
                tex = _renderer->Create2DTextureFromMemory(img.GetData(), img.GetDimensions().x, img.GetDimensions().y);
            }
            tex_name += font_system32->GetName();
            tex->SetDebugName(tex_name);
            _renderer->RegisterTexture(tex_name, std::move(tex));
        }
        std::string name = font_system32->GetName();
        std::string shader = "__2D";
        std::ostringstream material_stream;
        material_stream << "<material name=\"Font_" << name << "\">";
        material_stream << "<shader src=\"" << shader << "\" />";
        material_stream << "<textures>";
        material_stream << "<diffuse src=\"" << tex_name << "\" />";
        material_stream << "</textures>";
        material_stream << "</material>";
        tinyxml2::XMLDocument doc;
        std::string material_string = material_stream.str();
        auto result = doc.Parse(material_string.c_str(), material_string.size());
        if(result != tinyxml2::XML_SUCCESS) {
            return;
        }
        auto xml_root = doc.RootElement();
        auto mat = std::make_unique<Material>(_renderer, *xml_root);
        font_system32->SetMaterial(mat.get());
        _renderer->RegisterMaterial(std::move(mat));
        _renderer->RegisterFont(std::move(font_system32));
    }
}

void Console::HistoryUp() noexcept {
    if(_current_history_position == _entryline_buffer.begin()) {
        return;
    }
    --_current_history_position;
    _entryline = *_current_history_position;
    MoveCursorToEnd();
}

void Console::HistoryDown() noexcept {
    if(_current_history_position != _entryline_buffer.end()) {
        ++_current_history_position;
        if(_current_history_position == _entryline_buffer.end()) {
            ClearEntryLine();
        } else {
            _entryline = *_current_history_position;
        }
    }
    MoveCursorToEnd();
}

void Console::InsertCharInEntryLine(unsigned char c) noexcept {
    _entryline_changed = true;
    if(!_entryline.empty()) {
        if(_cursor_position != _selection_position) {
            RemoveText(_cursor_position, _selection_position);
        }
        if(_cursor_position == _entryline.end()) {
            _entryline.push_back(c);
            _cursor_position = _entryline.end();
        } else {
            _entryline.insert(_cursor_position, c);
            ++_cursor_position;
        }
    } else {
        _entryline += c;
        _cursor_position = _entryline.end();
    }
    _selection_position = _cursor_position;
}

void Console::PrintMsg(const std::string& msg) noexcept {
    OutputMsg(msg, Rgba::White);
}

void Console::WarnMsg(const std::string& msg) noexcept {
    OutputMsg(msg, Rgba::Yellow);
}

void Console::ErrorMsg(const std::string& msg) noexcept {
    OutputMsg(msg, Rgba::Red);
}

void Console::DrawBackground(const Vector2& view_half_extents) const noexcept {
    _renderer->SetModelMatrix(Matrix4::CreateScaleMatrix(view_half_extents * 2.0f));
    _renderer->SetMaterial(_renderer->GetMaterial("__2D"));
    _renderer->DrawQuad2D(Rgba(0, 0, 0, 128));
}

void Console::DrawEntryLine(const Vector2& view_half_extents) const noexcept {

    auto font = _renderer->GetFont("System32");
    float textline_bottom = view_half_extents.y * 0.99f;
    float textline_left = -view_half_extents.x * 0.99f;

    Matrix4 entryline_t = Matrix4::CreateTranslationMatrix(Vector3(textline_left, textline_bottom, 0.0f));
    Matrix4 model_entryline_mat = entryline_t;
    _renderer->SetModelMatrix(model_entryline_mat);
    _renderer->SetMaterial(font->GetMaterial());

    if(_cursor_position != _selection_position) {

        float xPosOffsetToCaret = font->CalculateTextWidth(std::string(std::begin(_entryline), _cursor_position));
        float xPosOffsetToSelect = font->CalculateTextWidth(std::string(std::begin(_entryline), _selection_position));
        auto rangeStart = _cursor_position;
        auto rangeEnd = _selection_position;
        if(_selection_position < _cursor_position) {
            std::swap(rangeStart, rangeEnd);
            std::swap(xPosOffsetToCaret, xPosOffsetToSelect);
        }

        _renderer->SetModelMatrix(Matrix4::CreateScaleMatrix(Vector2(500.0f, 500.0f)));
        _renderer->SetMaterial(_renderer->GetMaterial("__2D"));
        _renderer->DrawQuad2D();

        _renderer->SetModelMatrix(model_entryline_mat);
        _renderer->SetMaterial(font->GetMaterial());

        _renderer->DrawTextLine(font, std::string(_entryline, 0, std::distance(std::cbegin(_entryline), rangeStart)), Rgba::White);
        Matrix4 rightside_t = Matrix4::CreateTranslationMatrix(Vector3(xPosOffsetToSelect, 0.0f, 0.0f));
        rightside_t = rightside_t * model_entryline_mat;
        _renderer->SetModelMatrix(rightside_t);
        _renderer->DrawTextLine(font, std::string(_entryline, std::distance(std::cbegin(_entryline), rangeEnd), std::distance(rangeEnd, std::cend(_entryline))), Rgba::White);

        float xPosOffsetToStart = font->CalculateTextWidth(std::string(std::begin(_entryline), rangeStart));
        Matrix4 blacktext_t = Matrix4::CreateTranslationMatrix(Vector3(xPosOffsetToStart, 0.0f, 0.0f));
        Matrix4 model_mat_blacktext = blacktext_t * model_entryline_mat;
        _renderer->SetModelMatrix(model_mat_blacktext);
        _renderer->DrawTextLine(font, std::string(rangeStart, rangeEnd), Rgba::Black);

    } else {
        _renderer->SetModelMatrix(model_entryline_mat);
        _renderer->SetMaterial(font->GetMaterial());
        _renderer->DrawTextLine(font, _entryline, Rgba::White);
    }
}

Vector2 Console::SetupViewFromCamera() const noexcept {
    const auto& window = _renderer->GetOutput();
    const auto& window_dimensions = window->GetDimensions();
    const auto& aspect = window->GetAspectRatio();
    float window_width = static_cast<float>(window_dimensions.x);
    float window_height = static_cast<float>(window_dimensions.y);
    float view_half_width = window_width * 0.50f;
    float view_half_height = window_height * 0.50f;
    Vector2 leftBottom = Vector2(-view_half_width, view_half_height);
    Vector2 rightTop = Vector2(view_half_width, -view_half_height);
    Vector2 nearFar = Vector2(0.0f, 1.0f);
    _camera->SetupView(leftBottom, rightTop, nearFar, aspect);

    _renderer->SetViewMatrix(_camera->GetViewMatrix());
    _renderer->SetProjectionMatrix(_camera->GetProjectionMatrix());

    return Vector2(view_half_width, view_half_height);
}

void Console::EndFrame() {
    /* DO NOTHING */
}

Console::CommandList::CommandList(Console* console /*= nullptr*/) noexcept
    : _console(console)
{
    /* DO NOTHING */
}


Console::CommandList::CommandList(Console* console, const std::vector<Command>& commands) noexcept
    : _console(console)
    , _commands(commands)
{
    if(!_console) {
        return;
    }
    for(const auto& command : _commands) {
        _console->RegisterCommand(command);
    }
}

Console::CommandList::~CommandList() noexcept {
    if(!_console) {
        return;
    }
    for(const auto& command : _commands) {
        _console->UnregisterCommand(command.command_name);
    }
}

void Console::CommandList::AddCommand(const Command& command) {
    _commands.emplace_back(command);
}

void Console::CommandList::RemoveCommand(const std::string& name) {
    _commands.erase(std::remove_if(std::begin(_commands), std::end(_commands), [&name](const Console::Command& command) { return name == command.command_name; }), std::end(_commands));
}

void Console::CommandList::RemoveAllCommands() noexcept {
    _commands.clear();
}

const std::vector<Console::Command>& Console::CommandList::GetCommands() const noexcept {
    return _commands;
}
